% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/doublesigmoidalFitFunctions.R
\name{doublesigmoidalFitFunction}
\alias{doublesigmoidalFitFunction}
\title{doublesigmoidalFitFunction}
\usage{
doublesigmoidalFitFunction(dataInput, tryCounter,
  startList = list(finalAsymptoteIntensity = 0, maximum = 1, slope1 = 1,
  midPoint1 = 0.3333333, slope2 = 1, midPointDistance = 0.2916667),
  lowerBounds = c(finalAsymptoteIntensity = 0, maximum = 0.3, slope1 = 0.01,
  midPoint1 = -0.5208333, slope2 = 0.01, midPointDistance = 0.04166667),
  upperBounds = c(finalAsymptoteIntensity = 1, maximum = 1.5, slope1 = 120,
  midPoint1 = 1.145833, slope2 = 120, midPointDistance = 0.625),
  min_Factor = 1/2^20, n_iterations = 500)
}
\arguments{
\item{dataInput}{dataInput should be a data frame composed of two columns. One is for time other is for intensity. Or it should be a normalized data generated by normalizeData function}

\item{tryCounter}{is the input that represent the number of the call of this function for the same situation.}

\item{startList}{The initial set of parameters that algorithm tries for the fit. Where the parameters are 'maximumValue' that represents the maximum value that the function that can take, 'slope1' that represents the maximum slope in normalized y axis at the exponential phase, 'midPoint1' that represents the x axis value for maximum slope in exponential phase, 'slope2' that represents the maximum slope in normalized y axis during lysis, 'midPointDistance' that represents the x axis distance between maximum slope in exponential phase and maximum slope in lysis, 'finalAsymptoteIntensity' represents the intensity value at time is infinite as the ratio with respect to maximum value reached so it should be a number between 0 and 1.}

\item{lowerBounds}{The lower bouns for the randomly generated start parameters and also for the search space that the program runs. The elements of the vector are 'maximum' that represents the maximum value that the function that can take, 'slope1' that represents the maximum slope in normalized y axis at the exponential phase, 'midPoint1' that represents the x axis value for maximum slope in exponential phase,'slope2' that represents the maximum slope in normalized y axis during lysis, 'midPointDistance' that represents the x axis distance between maximum slope in exponential phase and maximum slope in lysis, 'finalAsymptoteIntensity' represents the intensity value at time is infiniteas the ratio with respect to maximum value reached so it should be a number between 0 and 1.}

\item{upperBounds}{The lower bouns for the randomly generated start parameters and also for the search space that the program runs. The elements of the vector are 'maximum' that represents the maximum value that the function that can take, 'slope1' that represents the maximum slope in normalized y axis at the exponential phase, 'midPoint1' that represents the x axis value for maximum slope in exponential phase, 'slope2' that represents the maximum slope in normalized y axis during lysis, 'midPointDistance' that represents the x axis distance between maximum slope in exponential phase and maximum slope in lysis, 'finalAsymptoteIntensity' represents the intensity value at time is infiniteas the ratio with respect to maximum value reached so it should be a number between 0 and 1.}

\item{min_Factor}{define minimum step size in the iterations}

\item{n_iterations}{define maximum number of iterations for a run}
}
\value{
Function returns fitted parameters for lineFit. The slope, intersection and parameters related with quality of the fit
}
\description{
doublesigmoidalFitFunction
}
\examples{
# Related example

# Initial Command to Reset the System
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\\014")

time=seq(3,24,0.1)

#intensity with Noise
noise_parameter=0.2
intensity_noise=runif(n = length(time),min = 0,max = 1)*noise_parameter
intensity=doublesigmoidalFitFormula(time,
                                   finalAsymptoteIntensity=.3,
                                   maximum=4,
                                   slope1=1,
                                   midPoint1=7,
                                   slope2=1,
                                   midPointDistance=8)
intensity=intensity+intensity_noise

dataInput=data.frame(intensity=intensity,time=time)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
parameterVector<-doublesigmoidalFitFunction(dataInput2,tryCounter=2)


#Check the results
if(parameterVector$isThisaFit){
 intensityTheoretical=doublesigmoidalFitFormula(time,
                                                finalAsymptoteIntensity=parameterVector$finalAsymptoteIntensity_Estimate,
                                                maximum=parameterVector$maximum_Estimate,
                                                slope1=parameterVector$slope1_Estimate,
                                                midPoint1=parameterVector$midPoint1_Estimate,
                                                slope2=parameterVector$slope2_Estimate,
                                                midPointDistance=parameterVector$midPointDistance_Estimate)

 comparisonData=cbind(dataInput,intensityTheoretical)
 ggplot(comparisonData)+
   geom_point(aes(x=time, y=intensity))+
   geom_line(aes(x=time,y=intensityTheoretical))+
   expand_limits(x = 0, y = 0)}

if(!parameterVector$isThisaFit){print(parameterVector)}
}

