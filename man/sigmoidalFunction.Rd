% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/sigmoidalFitFunctions.R
\name{sigmoidalFunction}
\alias{sigmoidalFunction}
\title{sigmoidalFunction}
\usage{
sigmoidalFunction(dataInput, tryCounter, startList = list(maximum = 1, slope =
  1, midPoint = 0.3333333), lowerBounds = c(maximum = 0.3, slope = 0.01,
  midPoint = 0.3125 - 0.8333333), upperBounds = c(maximum = 1.5, slope = 50,
  midPoint = 0.3125 + 0.8333333), min_Factor = 1/2^20, n_iterations = 500)
}
\arguments{
\item{dataInput}{dataInput should be a data frame composed of two columns. One is for time other is for intensity. Or it should be a normalized data generated by normalizeData function}

\item{tryCounter}{is the input that represent the number of the call of this function for the same situation.}

\item{startList}{The initial set of parameters that algorithm tries for the fit. Where the parameters are 'maximumValue' that represents the maximum value that the function that can take,  'slopeValue' that represents the slope in normalized y axis, 'midPointValue' that represents midpoint.}

\item{lowerBounds}{The lower bouns for the randomly generated start parameters. The elements of the vector are  'maximumValue' that represents the maximum value that the function that can take,  'slopeValue' that represents the slope in normalized y axis, 'midPointValue' that represents midpoint}

\item{upperBounds}{The lower bouns for the randomly generated start parameters. The elements of the vector are  'maximumValue' that represents the maximum value that the function that can take,  'slopeValue' that represents the slope in normalized y axis, 'midPointValue' that represents midpoint}

\item{min_Factor}{define minimum step size in the iterations}

\item{n_iterations}{define maximum number of iterations for a run}
}
\value{
Function returns fitted parameters for lineFit. The slope, intersection and parameters related with quality of the fit
}
\description{
sigmoidalFunction
}
\examples{
# related examples
time=seq(3,24,0.5)

#intensity with Noise
noise_parameter=0.1
intensity_noise=runif(n = length(time),min = 0,max = 1)*noise_parameter
intensity=sigmoidalFitFormula(time, maximum=1, slope=1, midPoint=8)
intensity=intensity+intensity_noise

dataInput=data.frame(intensity=intensity,time=time)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
parameterVector<-sigmoidalFunction(dataInput2,tryCounter=2)

#Check the results
time=dataInput2$timeIntensityData$time
intensityTheoretical=sigmoidalFitFormula(time,
                                        maximum=parameterVector$maximum_Estimate,
                                        slope=parameterVector$slope_Estimate,
                                        midPoint=parameterVector$midPoint_Estimate)

comparisonData=cbind(dataInput2$timeIntensityData,intensityTheoretical)
ggplot(comparisonData)+
 geom_point(aes(x=time, y=intensity))+
 geom_line(aes(x=time,y=intensityTheoretical))+
 ylim(c(0,1.04))+xlim(c(0,1.04))
}

