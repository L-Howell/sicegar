% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multipleFitFunction.R
\name{multipleFitFunction}
\alias{multipleFitFunction}
\title{multiple fit function.}
\usage{
multipleFitFunction(dataInput, dataInputName = NA, model, n_runs_min = 20,
  n_runs_max = 500, showDetails = FALSE, randomParameter = NA, ...)
}
\arguments{
\item{dataInput}{normalized input data that will be fitted transferred into related functions}

\item{dataInputName}{name of data set (Default is 'NA').}

\item{model}{type of fit function that will be used. Can be "linear", "sigmoidal", "double_sigmoidal", or "test".}

\item{n_runs_min}{number of minimum successfull runs returned by the fitting algorithm.}

\item{n_runs_max}{number of maximum number of times the fitting is attempted.}

\item{showDetails}{if TRUE prints details of intermediate steps of individual fits (Default is FALSE).}

\item{randomParameter}{a parameter needed to run the "test" model. Default is 'NA'}

\item{...}{all other arguments that model functions ("exampleFitFunction", "lineFitFunction", "sigmoidalFitFunction", "doublesigmoidalFitFunction") may need}
}
\value{
Returns the parameters related with the model fitted for the input data.
}
\description{
Calls the fitting algorithms to fit the data starting from different randomly generated initial parameters. Multiple attempts at fitting the data are necessary to avoid local minima.
}
\examples{
# Example 1 (linear function with normalization)
time=seq(3,24,0.5)

#simulate intensity data with noise
noise_parameter=20
intensity_noise=stats::runif(n = length(time),min = 0,max = 1)*noise_parameter
intensity=lineFitFormula(time, slope=4, intersection=-2)
intensity=intensity+intensity_noise

dataInput=data.frame(intensity=intensity,time=time)
normalizedInput = normalizeData(dataInput)
parameterVector=multipleFitFunction(dataInput=normalizedInput,
                           model="linear",
                           n_runs_min=5,
                           n_runs_max=15)

#Check the results
if(parameterVector$isThisaFit){
 intensityTheoretical=lineFitFormula(time,
                                     slope=parameterVector$slope_Estimate,
                                     intersection=parameterVector$intersection_Estimate)

 comparisonData=cbind(dataInput,intensityTheoretical)

 print(parameterVector$residual_Sum_of_Squares)
 require(ggplot2)
 ggplot(comparisonData)+
   geom_point(aes(x=time, y=intensity))+
   geom_line(aes(x=time,y=intensityTheoretical))+
   expand_limits(x = 0, y = 0)}

if(!parameterVector$isThisaFit){print(parameterVector)}

# Example 2 (sigmoidal function with normalization)
time=seq(3,24,0.5)

#simulate intensity data and add noise
noise_parameter=2.5
intensity_noise=stats::runif(n = length(time),min = 0,max = 1)*noise_parameter
intensity=sigmoidalFitFormula(time, maximum=4, slopeParam=1, midPoint=8)
intensity=intensity+intensity_noise

dataInput=data.frame(intensity=intensity,time=time)
normalizedInput = normalizeData(dataInput, dataInputName="batch_01_21_2016_samp007623")
parameterVector=multipleFitFunction(dataInput=normalizedInput,
                           model="sigmoidal",
                           n_runs_min=20,
                           n_runs_max=500)

#Check the results
if(parameterVector$isThisaFit){
 intensityTheoretical=sigmoidalFitFormula(time,
                                          maximum=parameterVector$maximum_Estimate,
                                          slopeParam=parameterVector$slopeParam_Estimate,
                                          midPoint=parameterVector$midPoint_Estimate)

 comparisonData=cbind(dataInput,intensityTheoretical)

 print(parameterVector$residual_Sum_of_Squares)

 require(ggplot2)
 ggplot(comparisonData)+
   geom_point(aes(x=time, y=intensity))+
   geom_line(aes(x=time,y=intensityTheoretical),color="orange")+
   expand_limits(x = 0, y = 0)}



if(!parameterVector$isThisaFit){print(parameterVector)}

# Example 3 (doublesigmoidal function with normalization)
time=seq(3,24,0.1)

#simulate intensity data with noise
noise_parameter=0.2
intensity_noise=stats::runif(n = length(time),min = 0,max = 1)*noise_parameter
intensity=doublesigmoidalFitFormula(time,
                                   finalAsymptoteIntensityRatio=.3,
                                   maximum=4,
                                   slope1Param=1,
                                   midPoint1Param=7,
                                   slope2Param=1,
                                   midPointDistanceParam=8)
intensity=intensity+intensity_noise

dataInput=data.frame(intensity=intensity,time=time)
normalizedInput = normalizeData(dataInput)
parameterVector=multipleFitFunction(dataInput=normalizedInput,
                           dataInputName="batch_01_21_2016_samp007623",
                           model="doublesigmoidal",
                           n_runs_min=20,
                           n_runs_max=500,
                           showDetails=FALSE)


#Check the results
if(parameterVector$isThisaFit){
 intensityTheoretical=
       doublesigmoidalFitFormula(
               time,
               finalAsymptoteIntensityRatio=parameterVector$finalAsymptoteIntensityRatio_Estimate,
               maximum=parameterVector$maximum_Estimate,
               slope1Param=parameterVector$slope1Param_Estimate,
               midPoint1Param=parameterVector$midPoint1Param_Estimate,
               slope2Param=parameterVector$slope2Param_Estimate,
               midPointDistanceParam=parameterVector$midPointDistanceParam_Estimate)

 comparisonData=cbind(dataInput,intensityTheoretical)

 require(ggplot2)
 ggplot(comparisonData)+
   geom_point(aes(x=time, y=intensity))+
   geom_line(aes(x=time,y=intensityTheoretical),color="orange")+
   expand_limits(x = 0, y = 0)}

if(!parameterVector$isThisaFit){print(parameterVector)}
}

