% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/counterFunction.R
\name{counterFunction}
\alias{counterFunction}
\title{Counter function}
\usage{
counterFunction(dataInput, model, n_runs_min, n_runs_max, ...)
}
\arguments{
\item{model}{type of fit function that will be used. Can be "linear", "sigmoidal", "double_sigmoidal", "test"}

\item{n_runs_min}{number of minimum runs that the algorithm can run}

\item{n_runs_max}{number of maximum runs that the algorithm can run}

\item{data}{Normalized input data that will be fitted transferred into related functions}
}
\value{
The function returns the parameters related with fitted curve to input data
}
\description{
Counter function
}
\details{
the algorithm calls the fitting algorithms. to make the fits with random initial parameters. This multiple runs are necessary to avoid local minimums that LM fits can stuck. Fitting algorithms can either gives a fit with related parameters and isThisaFit=TRUE value or just give isThisaFit=FALSE corresponding to not a fit. n_runs_min represent minimum number of fits that are necessary to give a result, n_runs_max limits the number of runs (successful or unsuccessful) that the it algorithm can run
}
\examples{
# Example 1 (test function without normalization)
# data sent to algorithm directly as data frame
# a- Generate data
time = seq(3,48,0.5)
intensity=runif(length(time), 3.0, 7.5)
dataInput = data.frame(time,intensity)
# b- generate "random Parameter" for model "test"
randomParameter=0.7 # it should be a parameter between 0 and 1
# c- use the function "test"
parameterOutput=counterFunction(data=dataInput,model="test",n_runs_min=5,n_runs_max=15)

# Example 2 (test function with normalization)
# data sent to algorithm after normalization
# a- Generate data
time = seq(3,48,0.5)
intensity=runif(length(time), 3.0, 7.5)
dataInput = data.frame(time,intensity)
# b- normalize data
dataOutput = normalizeData(dataInput)
# c- generate "random Parameter" for model "test"
randomParameter=0.7 # it should be a parameter between 0 and 1
# d- use the function "test"
dataInput2=dataOutput
parameterOutput=counterFunction(data=dataInput2,
                                model="test",
                                n_runs_min=5,
                                n_runs_max=15)

# Example 3 (linear function without normalization)
# data sent to algorithm directly as data frame
# a- Generate data
time = seq(3,48,0.5)
intensity=runif(length(time), 3.0, 7.5)
dataInput = data.frame(time,intensity)
# b- use the function "linear"
parameterOutput=counterFunction(data=dataInput,
                                model="linear",
                                n_runs_min=5,
                                n_runs_max=15)

# Example 4 (linear function with normalization)
# data sent to algorithm after normalization
# a- Generate data
time = seq(3,48,0.5)
intensity=runif(length(time), 3.0, 7.5)
dataInput = data.frame(time,intensity)
# b- normalize data
dataOutput = normalizeData(dataInput)
# c- use the function "linear"
dataInput2=dataOutput
parameterOutput=counterFunction(data=dataInput2,
                                model="linear",
                                n_runs_min=5,
                                n_runs_max=15)

# Example 5 (sigmoidal function with normalization)
# Initial Command to Reset the System
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\\014")

time=seq(3,24,0.5)

#intensity with Noise
noise_parameter=2.5
intensity_noise=runif(n = length(time),min = 0,max = 1)*noise_parameter
intensity=sigmoidalFitFormula(time, maximum=4, slope=1, midPoint=8)
intensity=intensity+intensity_noise

dataInput=data.frame(intensity=intensity,time=time)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
parameterVector=counterFunction(data=dataInput2,
                               model="sigmoidal",
                               n_runs_min=20,
                               n_runs_max=500)

#Check the results
if(parameterVector$isThisaFit){
 intensityTheoretical=sigmoidalFitFormula(time,
                                          maximum=parameterVector$maximum_Estimate,
                                          slope=parameterVector$slope_Estimate,
                                          midPoint=parameterVector$midPoint_Estimate)

 comparisonData=cbind(dataInput,intensityTheoretical)

 print(parameterVector$residual_Sum_of_Squares)
 ggplot(comparisonData)+
   geom_point(aes(x=time, y=intensity))+
   geom_line(aes(x=time,y=intensityTheoretical),color="orange")+
   expand_limits(x = 0, y = 0)}



if(!parameterVector$isThisaFit){print(parameterVector)}



# Example 6 (doublesigmoidal function with normalization)
# Initial Command to Reset the System
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\\014")

time=seq(3,24,0.1)

#intensity with Noise
noise_parameter=0.2
intensity_noise=runif(n = length(time),min = 0,max = 1)*noise_parameter
intensity=doublesigmoidalFitFormula(time,
                                   finalAsymptoteIntensity=.3,
                                   maximum=4,
                                   slope1=1,
                                   midPoint1=7,
                                   slope2=1,
                                   midPointDistance=8)
intensity=intensity+intensity_noise

dataInput=data.frame(intensity=intensity,time=time)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
parameterVector=counterFunction(data=dataInput2,
                               model="doublesigmoidal",
                               n_runs_min=20,
                               n_runs_max=500)


#Check the results
if(parameterVector$isThisaFit){
 intensityTheoretical=doublesigmoidalFitFormula(time,
                                                finalAsymptoteIntensity=parameterVector$finalAsymptoteIntensity_Estimate,
                                                maximum=parameterVector$maximum_Estimate,
                                                slope1=parameterVector$slope1_Estimate,
                                                midPoint1=parameterVector$midPoint1_Estimate,
                                                slope2=parameterVector$slope2_Estimate,
                                                midPointDistance=parameterVector$midPointDistance_Estimate)

 comparisonData=cbind(dataInput,intensityTheoretical)
 ggplot(comparisonData)+
   geom_point(aes(x=time, y=intensity))+
   geom_line(aes(x=time,y=intensityTheoretical),color="orange")+
   expand_limits(x = 0, y = 0)}

if(!parameterVector$isThisaFit){print(parameterVector)}
}

