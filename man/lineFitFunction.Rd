% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lineFitFunctions.R
\name{lineFitFunction}
\alias{lineFitFunction}
\title{lineFitFunction}
\usage{
lineFitFunction(dataInput, tryCounter, startList = list(slope = 0,
  intersection = 1), lowerBounds = c(-100, -1000), upperBounds = c(100,
  1000), min_Factor = 1/2^20, n_iterations = 500)
}
\arguments{
\item{dataInput}{dataInput should be a data frame composed of two columns. One is for time other is for intensity. Or it should be a normalized data generated by normalizeData function}

\item{tryCounter}{is the input that represent the number of the call of this function for the same situation}

\item{startList}{The initial set of parameters that algorithm tries for the fit, where the parameters are slope and intercetion.}

\item{lowerBounds}{The lower bouns for the randomly generated start parameters, where the parameters are slope and intercetion.}

\item{upperBounds}{The lower bouns for the randomly generated start parameters, where the parameters are slope and intercetion.}

\item{min_Factor}{define minimum step size in the iterations}

\item{n_iterations}{define maximum number of iterations for a run}
}
\value{
Function returns fitted parameters for lineFit. The slope, intersection and parameters related with quality of the fit
}
\examples{
# related examples
# Initial Command to Reset the System
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\\014")

time=seq(3,24,0.5)

#intensity with Noise
noise_parameter=.2
intensity_noise=runif(n = length(time),min = 0,max = 1)*noise_parameter
intensity=lineFitFormula(time, slope=4, intersection=-2)
intensity=intensity+intensity_noise

dataInput=data.frame(intensity=intensity,time=time)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
parameterVector<-lineFitFunction(dataInput2,tryCounter=2)

#Check the results
if(parameterVector$isThisaFit){
 intensityTheoretical=lineFitFormula(time,
                                     slope=parameterVector$slope_Estimate,
                                     intersection=parameterVector$intersection_Estimate)

 comparisonData=cbind(dataInput,intensityTheoretical)

 print(parameterVector$residual_Sum_of_Squares)
 require(ggplot2)
 ggplot(comparisonData)+
   geom_point(aes(x=time, y=intensity))+
   geom_line(aes(x=time,y=intensityTheoretical))+
   expand_limits(x = 0, y = 0)}

if(!parameterVector$isThisaFit){print(parameterVector)}

}

